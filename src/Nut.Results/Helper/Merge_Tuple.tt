<#@ template language="C#" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>// <auto-generated />
using System;

namespace Nut.Results;

public static partial class ResultHelper
{
<#
    for (var i = 1; i <= 15; i++)
    {
        var range = Enumerable.Range(0, i + 1);
        var typeArgs = string.Join(", ", range.Select(v => "T" + v));
        var destArgs = string.Join(", ", range.Skip(1).Select(v => $"in Result<T{v}> dest{v}"));
        var paramValues = string.Join(", ", range.Skip(1).Select(v => $"dest{v}"));
        var comment = @$"/// <summary>
    /// <see cref=""Result{{T}}""/> の結果をマージします。
    /// </summary>
    /// <param name=""dest0"">最初の結果</param>
{string.Join(Environment.NewLine, range.Skip(1).Select(v => "    /// <param name=\"dest" + v + "\">" + v + "番目の結果</param>"))}
    /// <typeparam name=""T0"">最初の成功の型</typeparam>
{string.Join(Environment.NewLine, range.Skip(1).Select(v => "    /// <typeparam name=\"T" + v + "\">" + v + "番目の成功の型</typeparam>"))}
    /// <returns>マージした結果</returns>";
#>
    <#= comment #>
    public static Result<(<#= typeArgs #>)> Merge<<#= typeArgs #>>(in Result<T0> dest0, <#= destArgs #>)
        => dest0.Merge(<#= paramValues #>);
<#
    }
#>
}
