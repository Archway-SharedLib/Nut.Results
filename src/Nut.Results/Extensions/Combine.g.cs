// <auto-generated />
using System;
using System.Threading.Tasks;

namespace Nut.Results;

public static partial class ResultExtensions
{
    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static Result<(T0, T1)> Combine<T0, T1>(
        this in Result<T0> source,
        Func<T0, Result<T1>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1)>(source.GetError());

        var v0 = source.Get();
        var destResult = dest(v0);
        if (destResult.IsError) return Result.Error<(T0, T1)>(destResult.GetError());
        return Result.Ok((v0, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1)>> Combine<T0, T1>(
        this Task<Result<T0>> source,
        Func<T0, Result<T1>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return Combine(sourceResult, dest);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1)>> Combine<T0, T1>(
        this Result<T0> source,
        Func<T0, Task<Result<T1>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1)>(source.GetError());

        var v0 = source.Get();
        var destResult = await dest(v0).ConfigureAwait(false);
        if (destResult.IsError) return Result.Error<(T0, T1)>(destResult.GetError());
        return Result.Ok((v0, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1)>> Combine<T0, T1>(
        this Task<Result<T0>> source,
        Func<T0, Task<Result<T1>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return await Combine(sourceResult, dest).ConfigureAwait(false);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static Result<(T0, T1, T2)> Combine<T0, T1, T2>(
        this in Result<(T0, T1)> source,
        Func<(T0, T1), Result<T2>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2)>(source.GetError());

        var (v0, v1) = source.Get();
        var destResult = dest((v0, v1));
        if (destResult.IsError) return Result.Error<(T0, T1, T2)>(destResult.GetError());
        return Result.Ok((v0, v1, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2)>> Combine<T0, T1, T2>(
        this Task<Result<(T0, T1)>> source,
        Func<(T0, T1), Result<T2>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return Combine(sourceResult, dest);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2)>> Combine<T0, T1, T2>(
        this Result<(T0, T1)> source,
        Func<(T0, T1), Task<Result<T2>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2)>(source.GetError());

        var (v0, v1) = source.Get();
        var destResult = await dest((v0, v1)).ConfigureAwait(false);
        if (destResult.IsError) return Result.Error<(T0, T1, T2)>(destResult.GetError());
        return Result.Ok((v0, v1, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2)>> Combine<T0, T1, T2>(
        this Task<Result<(T0, T1)>> source,
        Func<(T0, T1), Task<Result<T2>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return await Combine(sourceResult, dest).ConfigureAwait(false);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static Result<(T0, T1, T2, T3)> Combine<T0, T1, T2, T3>(
        this in Result<(T0, T1, T2)> source,
        Func<(T0, T1, T2), Result<T3>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3)>(source.GetError());

        var (v0, v1, v2) = source.Get();
        var destResult = dest((v0, v1, v2));
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3)>> Combine<T0, T1, T2, T3>(
        this Task<Result<(T0, T1, T2)>> source,
        Func<(T0, T1, T2), Result<T3>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return Combine(sourceResult, dest);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3)>> Combine<T0, T1, T2, T3>(
        this Result<(T0, T1, T2)> source,
        Func<(T0, T1, T2), Task<Result<T3>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3)>(source.GetError());

        var (v0, v1, v2) = source.Get();
        var destResult = await dest((v0, v1, v2)).ConfigureAwait(false);
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3)>> Combine<T0, T1, T2, T3>(
        this Task<Result<(T0, T1, T2)>> source,
        Func<(T0, T1, T2), Task<Result<T3>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return await Combine(sourceResult, dest).ConfigureAwait(false);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static Result<(T0, T1, T2, T3, T4)> Combine<T0, T1, T2, T3, T4>(
        this in Result<(T0, T1, T2, T3)> source,
        Func<(T0, T1, T2, T3), Result<T4>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4)>(source.GetError());

        var (v0, v1, v2, v3) = source.Get();
        var destResult = dest((v0, v1, v2, v3));
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4)>> Combine<T0, T1, T2, T3, T4>(
        this Task<Result<(T0, T1, T2, T3)>> source,
        Func<(T0, T1, T2, T3), Result<T4>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return Combine(sourceResult, dest);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4)>> Combine<T0, T1, T2, T3, T4>(
        this Result<(T0, T1, T2, T3)> source,
        Func<(T0, T1, T2, T3), Task<Result<T4>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4)>(source.GetError());

        var (v0, v1, v2, v3) = source.Get();
        var destResult = await dest((v0, v1, v2, v3)).ConfigureAwait(false);
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4)>> Combine<T0, T1, T2, T3, T4>(
        this Task<Result<(T0, T1, T2, T3)>> source,
        Func<(T0, T1, T2, T3), Task<Result<T4>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return await Combine(sourceResult, dest).ConfigureAwait(false);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static Result<(T0, T1, T2, T3, T4, T5)> Combine<T0, T1, T2, T3, T4, T5>(
        this in Result<(T0, T1, T2, T3, T4)> source,
        Func<(T0, T1, T2, T3, T4), Result<T5>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5)>(source.GetError());

        var (v0, v1, v2, v3, v4) = source.Get();
        var destResult = dest((v0, v1, v2, v3, v4));
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5)>> Combine<T0, T1, T2, T3, T4, T5>(
        this Task<Result<(T0, T1, T2, T3, T4)>> source,
        Func<(T0, T1, T2, T3, T4), Result<T5>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return Combine(sourceResult, dest);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5)>> Combine<T0, T1, T2, T3, T4, T5>(
        this Result<(T0, T1, T2, T3, T4)> source,
        Func<(T0, T1, T2, T3, T4), Task<Result<T5>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5)>(source.GetError());

        var (v0, v1, v2, v3, v4) = source.Get();
        var destResult = await dest((v0, v1, v2, v3, v4)).ConfigureAwait(false);
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5)>> Combine<T0, T1, T2, T3, T4, T5>(
        this Task<Result<(T0, T1, T2, T3, T4)>> source,
        Func<(T0, T1, T2, T3, T4), Task<Result<T5>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return await Combine(sourceResult, dest).ConfigureAwait(false);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static Result<(T0, T1, T2, T3, T4, T5, T6)> Combine<T0, T1, T2, T3, T4, T5, T6>(
        this in Result<(T0, T1, T2, T3, T4, T5)> source,
        Func<(T0, T1, T2, T3, T4, T5), Result<T6>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5) = source.Get();
        var destResult = dest((v0, v1, v2, v3, v4, v5));
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6)>> Combine<T0, T1, T2, T3, T4, T5, T6>(
        this Task<Result<(T0, T1, T2, T3, T4, T5)>> source,
        Func<(T0, T1, T2, T3, T4, T5), Result<T6>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return Combine(sourceResult, dest);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6)>> Combine<T0, T1, T2, T3, T4, T5, T6>(
        this Result<(T0, T1, T2, T3, T4, T5)> source,
        Func<(T0, T1, T2, T3, T4, T5), Task<Result<T6>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5) = source.Get();
        var destResult = await dest((v0, v1, v2, v3, v4, v5)).ConfigureAwait(false);
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6)>> Combine<T0, T1, T2, T3, T4, T5, T6>(
        this Task<Result<(T0, T1, T2, T3, T4, T5)>> source,
        Func<(T0, T1, T2, T3, T4, T5), Task<Result<T6>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return await Combine(sourceResult, dest).ConfigureAwait(false);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7)> Combine<T0, T1, T2, T3, T4, T5, T6, T7>(
        this in Result<(T0, T1, T2, T3, T4, T5, T6)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6), Result<T7>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6) = source.Get();
        var destResult = dest((v0, v1, v2, v3, v4, v5, v6));
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6), Result<T7>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return Combine(sourceResult, dest);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7>(
        this Result<(T0, T1, T2, T3, T4, T5, T6)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6), Task<Result<T7>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6) = source.Get();
        var destResult = await dest((v0, v1, v2, v3, v4, v5, v6)).ConfigureAwait(false);
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6), Task<Result<T7>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return await Combine(sourceResult, dest).ConfigureAwait(false);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8)> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
        this in Result<(T0, T1, T2, T3, T4, T5, T6, T7)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7), Result<T8>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6, v7) = source.Get();
        var destResult = dest((v0, v1, v2, v3, v4, v5, v6, v7));
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, v7, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7), Result<T8>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return Combine(sourceResult, dest);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
        this Result<(T0, T1, T2, T3, T4, T5, T6, T7)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7), Task<Result<T8>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6, v7) = source.Get();
        var destResult = await dest((v0, v1, v2, v3, v4, v5, v6, v7)).ConfigureAwait(false);
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, v7, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7), Task<Result<T8>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return await Combine(sourceResult, dest).ConfigureAwait(false);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(
        this in Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8), Result<T9>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6, v7, v8) = source.Get();
        var destResult = dest((v0, v1, v2, v3, v4, v5, v6, v7, v8));
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, v7, v8, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8), Result<T9>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return Combine(sourceResult, dest);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(
        this Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8), Task<Result<T9>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6, v7, v8) = source.Get();
        var destResult = await dest((v0, v1, v2, v3, v4, v5, v6, v7, v8)).ConfigureAwait(false);
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, v7, v8, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8), Task<Result<T9>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return await Combine(sourceResult, dest).ConfigureAwait(false);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
        this in Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9), Result<T10>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) = source.Get();
        var destResult = dest((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9));
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9), Result<T10>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return Combine(sourceResult, dest);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
        this Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9), Task<Result<T10>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) = source.Get();
        var destResult = await dest((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9)).ConfigureAwait(false);
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9), Task<Result<T10>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return await Combine(sourceResult, dest).ConfigureAwait(false);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
        this in Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), Result<T11>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) = source.Get();
        var destResult = dest((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10));
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), Result<T11>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return Combine(sourceResult, dest);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
        this Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), Task<Result<T11>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) = source.Get();
        var destResult = await dest((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)).ConfigureAwait(false);
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), Task<Result<T11>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return await Combine(sourceResult, dest).ConfigureAwait(false);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">もとの結果の11番目の成功の型</typeparam>
    /// <typeparam name="T12">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
        this in Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), Result<T12>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) = source.Get();
        var destResult = dest((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11));
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">もとの結果の11番目の成功の型</typeparam>
    /// <typeparam name="T12">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), Result<T12>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return Combine(sourceResult, dest);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">もとの結果の11番目の成功の型</typeparam>
    /// <typeparam name="T12">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
        this Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), Task<Result<T12>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) = source.Get();
        var destResult = await dest((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)).ConfigureAwait(false);
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">もとの結果の11番目の成功の型</typeparam>
    /// <typeparam name="T12">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), Task<Result<T12>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return await Combine(sourceResult, dest).ConfigureAwait(false);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">もとの結果の11番目の成功の型</typeparam>
    /// <typeparam name="T12">もとの結果の12番目の成功の型</typeparam>
    /// <typeparam name="T13">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(
        this in Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), Result<T13>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12) = source.Get();
        var destResult = dest((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12));
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">もとの結果の11番目の成功の型</typeparam>
    /// <typeparam name="T12">もとの結果の12番目の成功の型</typeparam>
    /// <typeparam name="T13">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), Result<T13>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return Combine(sourceResult, dest);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">もとの結果の11番目の成功の型</typeparam>
    /// <typeparam name="T12">もとの結果の12番目の成功の型</typeparam>
    /// <typeparam name="T13">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(
        this Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), Task<Result<T13>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12) = source.Get();
        var destResult = await dest((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)).ConfigureAwait(false);
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">もとの結果の11番目の成功の型</typeparam>
    /// <typeparam name="T12">もとの結果の12番目の成功の型</typeparam>
    /// <typeparam name="T13">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), Task<Result<T13>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return await Combine(sourceResult, dest).ConfigureAwait(false);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">もとの結果の11番目の成功の型</typeparam>
    /// <typeparam name="T12">もとの結果の12番目の成功の型</typeparam>
    /// <typeparam name="T13">もとの結果の13番目の成功の型</typeparam>
    /// <typeparam name="T14">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(
        this in Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), Result<T14>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13) = source.Get();
        var destResult = dest((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13));
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">もとの結果の11番目の成功の型</typeparam>
    /// <typeparam name="T12">もとの結果の12番目の成功の型</typeparam>
    /// <typeparam name="T13">もとの結果の13番目の成功の型</typeparam>
    /// <typeparam name="T14">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), Result<T14>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return Combine(sourceResult, dest);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">もとの結果の11番目の成功の型</typeparam>
    /// <typeparam name="T12">もとの結果の12番目の成功の型</typeparam>
    /// <typeparam name="T13">もとの結果の13番目の成功の型</typeparam>
    /// <typeparam name="T14">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(
        this Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), Task<Result<T14>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13) = source.Get();
        var destResult = await dest((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13)).ConfigureAwait(false);
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">もとの結果の11番目の成功の型</typeparam>
    /// <typeparam name="T12">もとの結果の12番目の成功の型</typeparam>
    /// <typeparam name="T13">もとの結果の13番目の成功の型</typeparam>
    /// <typeparam name="T14">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), Task<Result<T14>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return await Combine(sourceResult, dest).ConfigureAwait(false);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">もとの結果の11番目の成功の型</typeparam>
    /// <typeparam name="T12">もとの結果の12番目の成功の型</typeparam>
    /// <typeparam name="T13">もとの結果の13番目の成功の型</typeparam>
    /// <typeparam name="T14">もとの結果の14番目の成功の型</typeparam>
    /// <typeparam name="T15">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(
        this in Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), Result<T15>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14) = source.Get();
        var destResult = dest((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14));
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">もとの結果の11番目の成功の型</typeparam>
    /// <typeparam name="T12">もとの結果の12番目の成功の型</typeparam>
    /// <typeparam name="T13">もとの結果の13番目の成功の型</typeparam>
    /// <typeparam name="T14">もとの結果の14番目の成功の型</typeparam>
    /// <typeparam name="T15">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), Result<T15>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return Combine(sourceResult, dest);
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">もとの結果の11番目の成功の型</typeparam>
    /// <typeparam name="T12">もとの結果の12番目の成功の型</typeparam>
    /// <typeparam name="T13">もとの結果の13番目の成功の型</typeparam>
    /// <typeparam name="T14">もとの結果の14番目の成功の型</typeparam>
    /// <typeparam name="T15">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(
        this Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), Task<Result<T15>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>(source.GetError());

        var (v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14) = source.Get();
        var destResult = await dest((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14)).ConfigureAwait(false);
        if (destResult.IsError) return Result.Error<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>(destResult.GetError());
        return Result.Ok((v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, destResult.Get()));
    }

    /// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name="source">もとの結果</param>
    /// <param name="dest">処理</param>
    /// <typeparam name="T0">もとの結果の0番目の成功の型</typeparam>
    /// <typeparam name="T1">もとの結果の1番目の成功の型</typeparam>
    /// <typeparam name="T2">もとの結果の2番目の成功の型</typeparam>
    /// <typeparam name="T3">もとの結果の3番目の成功の型</typeparam>
    /// <typeparam name="T4">もとの結果の4番目の成功の型</typeparam>
    /// <typeparam name="T5">もとの結果の5番目の成功の型</typeparam>
    /// <typeparam name="T6">もとの結果の6番目の成功の型</typeparam>
    /// <typeparam name="T7">もとの結果の7番目の成功の型</typeparam>
    /// <typeparam name="T8">もとの結果の8番目の成功の型</typeparam>
    /// <typeparam name="T9">もとの結果の9番目の成功の型</typeparam>
    /// <typeparam name="T10">もとの結果の10番目の成功の型</typeparam>
    /// <typeparam name="T11">もとの結果の11番目の成功の型</typeparam>
    /// <typeparam name="T12">もとの結果の12番目の成功の型</typeparam>
    /// <typeparam name="T13">もとの結果の13番目の成功の型</typeparam>
    /// <typeparam name="T14">もとの結果の14番目の成功の型</typeparam>
    /// <typeparam name="T15">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>
    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>> Combine<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(
        this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>> source,
        Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), Task<Result<T15>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return await Combine(sourceResult, dest).ConfigureAwait(false);
    }

}
