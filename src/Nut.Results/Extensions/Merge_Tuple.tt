<#@ template language="C#" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Diagnostics" #>// <auto-generated />
using System;
using System.Collections.Generic;

namespace Nut.Results;

public static partial class ResultExtensions
{
<#
    for (var i = 1; i <= 15; i++)
    {
        var range = Enumerable.Range(0, i + 1);
        var typeArgs = string.Join(", ", range.Select(v => "T" + v));
        var destArgs = string.Join(", ", range.Skip(1).Select(v => $"in Result<T{v}> dest{v}"));
        var getDestValues = string.Join(", ", range.Skip(1).Select(v => $"dest{v}._value"));
        var comment = @$"/// <summary>
    /// 引数で渡された <see cref=""Result{{T}}""/> の結果をマージします。
    /// </summary>
    /// <param name=""source"">もととなる結果</param>
{string.Join(Environment.NewLine, range.Skip(1).Select(v => "    /// <param name=\"dest" + v + "\">" + v + "番目の結果</param>"))}
    /// <typeparam name=""T0"">もととなる結果の成功の型</typeparam>
{string.Join(Environment.NewLine, range.Skip(1).Select(v => "    /// <typeparam name=\"T" + v + "\">" + v + "番目の成功の型</typeparam>"))}
    /// <returns>マージした結果</returns>";
#>
    <#= comment #>
    public static Result<(<#= typeArgs #>)> Merge<<#= typeArgs #>>(this in Result<T0> source, <#= destArgs #>)
    {
        var errors = new List<IError>();
        if(source.IsError) errors.Add(source._errorValue);
<#
        foreach (var l in range.Skip(1))
        {
#>
        if(dest<#= l #>.IsError) errors.Add(dest<#= l #>._errorValue);
<#
        }
#>
        if (errors.Count > 0) return Result.Error<(<#= typeArgs #>)>(new AggregateError(errors));
        return Result.Ok((source._value, <#= getDestValues #>));
    }

<#
    }
#>
}
