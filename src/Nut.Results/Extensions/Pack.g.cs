// <auto-generated />
using System;
using System.Threading.Tasks;

namespace Nut.Results;

public static partial class ResultExtensions
{
    public static Result<(T1, T2)> Pack<T1, T2>(this Result<T1> source, Func<Result<T1>, Result<T2>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(T1, T2)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(T1, T2)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue, resultValue));
    }

    public static async Task<Result<(T1, T2)>> Pack<T1, T2>(this Task<Result<T1>> source, Func<T1, Result<T2>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T1, T2)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T1, T2)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue, resultValue));
    }

    public static async Task<Result<(T1, T2)>> Pack<T1, T2>(this Result<T1> source, Func<T1, Task<Result<T2>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(T1, T2)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T1, T2)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue, resultValue));
    }

    public static async Task<Result<(T1, T2)>> Pack<T1, T2>(this Task<Result<T1>> source, Func<T1, Task<Result<T2>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T1, T2)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T1, T2)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue, resultValue));
    }

    public static Result<(T0, T1, T2)> Pack<T0, T1, T2>(this in Result<(T0, T1)> source, Func<(T0, T1), Result<T2>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(T0, T1, T2)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(T0, T1, T2)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, resultValue));
    }

    public static async Task<Result<(T0, T1, T2)>> Pack<T0, T1, T2>(this Task<Result<(T0, T1)>> source, Func<(T0, T1), Result<T2>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, resultValue));
    }

    public static async Task<Result<(T0, T1, T2)>> Pack<T0, T1, T2>(this Result<(T0, T1)> source, Func<(T0, T1), Task<Result<T2>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(T0, T1, T2)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, resultValue));
    }

    public static async Task<Result<(T0, T1, T2)>> Pack<T0, T1, T2>(this Task<Result<(T0, T1)>> source, Func<(T0, T1), Task<Result<T2>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, resultValue));
    }

    public static Result<(T0, T1, T2, T3)> Pack<T0, T1, T2, T3>(this in Result<(T0, T1, T2)> source, Func<(T0, T1, T2), Result<T3>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3)>> Pack<T0, T1, T2, T3>(this Task<Result<(T0, T1, T2)>> source, Func<(T0, T1, T2), Result<T3>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3)>> Pack<T0, T1, T2, T3>(this Result<(T0, T1, T2)> source, Func<(T0, T1, T2), Task<Result<T3>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3)>> Pack<T0, T1, T2, T3>(this Task<Result<(T0, T1, T2)>> source, Func<(T0, T1, T2), Task<Result<T3>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, resultValue));
    }

    public static Result<(T0, T1, T2, T3, T4)> Pack<T0, T1, T2, T3, T4>(this in Result<(T0, T1, T2, T3)> source, Func<(T0, T1, T2, T3), Result<T4>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4)>> Pack<T0, T1, T2, T3, T4>(this Task<Result<(T0, T1, T2, T3)>> source, Func<(T0, T1, T2, T3), Result<T4>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4)>> Pack<T0, T1, T2, T3, T4>(this Result<(T0, T1, T2, T3)> source, Func<(T0, T1, T2, T3), Task<Result<T4>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4)>> Pack<T0, T1, T2, T3, T4>(this Task<Result<(T0, T1, T2, T3)>> source, Func<(T0, T1, T2, T3), Task<Result<T4>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, resultValue));
    }

    public static Result<(T0, T1, T2, T3, T4, T5)> Pack<T0, T1, T2, T3, T4, T5>(this in Result<(T0, T1, T2, T3, T4)> source, Func<(T0, T1, T2, T3, T4), Result<T5>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5)>> Pack<T0, T1, T2, T3, T4, T5>(this Task<Result<(T0, T1, T2, T3, T4)>> source, Func<(T0, T1, T2, T3, T4), Result<T5>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5)>> Pack<T0, T1, T2, T3, T4, T5>(this Result<(T0, T1, T2, T3, T4)> source, Func<(T0, T1, T2, T3, T4), Task<Result<T5>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5)>> Pack<T0, T1, T2, T3, T4, T5>(this Task<Result<(T0, T1, T2, T3, T4)>> source, Func<(T0, T1, T2, T3, T4), Task<Result<T5>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, resultValue));
    }

    public static Result<(T0, T1, T2, T3, T4, T5, T6)> Pack<T0, T1, T2, T3, T4, T5, T6>(this in Result<(T0, T1, T2, T3, T4, T5)> source, Func<(T0, T1, T2, T3, T4, T5), Result<T6>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6)>> Pack<T0, T1, T2, T3, T4, T5, T6>(this Task<Result<(T0, T1, T2, T3, T4, T5)>> source, Func<(T0, T1, T2, T3, T4, T5), Result<T6>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6)>> Pack<T0, T1, T2, T3, T4, T5, T6>(this Result<(T0, T1, T2, T3, T4, T5)> source, Func<(T0, T1, T2, T3, T4, T5), Task<Result<T6>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6)>> Pack<T0, T1, T2, T3, T4, T5, T6>(this Task<Result<(T0, T1, T2, T3, T4, T5)>> source, Func<(T0, T1, T2, T3, T4, T5), Task<Result<T6>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, resultValue));
    }

    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7)> Pack<T0, T1, T2, T3, T4, T5, T6, T7>(this in Result<(T0, T1, T2, T3, T4, T5, T6)> source, Func<(T0, T1, T2, T3, T4, T5, T6), Result<T7>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6)>> source, Func<(T0, T1, T2, T3, T4, T5, T6), Result<T7>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7>(this Result<(T0, T1, T2, T3, T4, T5, T6)> source, Func<(T0, T1, T2, T3, T4, T5, T6), Task<Result<T7>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6)>> source, Func<(T0, T1, T2, T3, T4, T5, T6), Task<Result<T7>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, resultValue));
    }

    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8)> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this in Result<(T0, T1, T2, T3, T4, T5, T6, T7)> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7), Result<T8>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7)>> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7), Result<T8>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Result<(T0, T1, T2, T3, T4, T5, T6, T7)> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7), Task<Result<T8>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7)>> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7), Task<Result<T8>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, resultValue));
    }

    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this in Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8)> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8), Result<T9>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8), Result<T9>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8)> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8), Task<Result<T9>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8)>> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8), Task<Result<T9>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, resultValue));
    }

    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this in Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9), Result<T10>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9), Result<T10>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9), Task<Result<T10>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)>> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9), Task<Result<T10>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, resultValue));
    }

    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this in Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), Result<T11>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), Result<T11>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), Task<Result<T11>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10), Task<Result<T11>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, resultValue));
    }

    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this in Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), Result<T12>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, sourceValue.Item12, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), Result<T12>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, sourceValue.Item12, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), Task<Result<T12>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, sourceValue.Item12, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)>> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11), Task<Result<T12>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, sourceValue.Item12, resultValue));
    }

    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this in Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), Result<T13>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, sourceValue.Item12, sourceValue.Item13, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), Result<T13>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, sourceValue.Item12, sourceValue.Item13, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), Task<Result<T13>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, sourceValue.Item12, sourceValue.Item13, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)>> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12), Task<Result<T13>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, sourceValue.Item12, sourceValue.Item13, resultValue));
    }

    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this in Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), Result<T14>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, sourceValue.Item12, sourceValue.Item13, sourceValue.Item14, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), Result<T14>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, sourceValue.Item12, sourceValue.Item13, sourceValue.Item14, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), Task<Result<T14>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, sourceValue.Item12, sourceValue.Item13, sourceValue.Item14, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)>> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13), Task<Result<T14>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, sourceValue.Item12, sourceValue.Item13, sourceValue.Item14, resultValue));
    }

    public static Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this in Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), Result<T15>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, sourceValue.Item12, sourceValue.Item13, sourceValue.Item14, sourceValue.Item15, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), Result<T15>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, sourceValue.Item12, sourceValue.Item13, sourceValue.Item14, sourceValue.Item15, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), Task<Result<T15>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, sourceValue.Item12, sourceValue.Item13, sourceValue.Item14, sourceValue.Item15, resultValue));
    }

    public static async Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>> Pack<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Task<Result<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)>> source, Func<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14), Task<Result<T15>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue.Item1, sourceValue.Item2, sourceValue.Item3, sourceValue.Item4, sourceValue.Item5, sourceValue.Item6, sourceValue.Item7, sourceValue.Item8, sourceValue.Item9, sourceValue.Item10, sourceValue.Item11, sourceValue.Item12, sourceValue.Item13, sourceValue.Item14, sourceValue.Item15, resultValue));
    }
}
