<#@ template language="C#" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>// <auto-generated />
using System;
using System.Threading.Tasks;

namespace Nut.Results;

public static partial class ResultExtensions
{
<#
    for (var i = 0; i < 15; i++)
    {
        var range = Enumerable.Range(0, i + 2);
        var typeArgs = string.Join(", ", range.Select(v => "T" + v));
        var sourceTypeArgs = i == 0 ? "T0" : $"({string.Join(", ", range.Take(i + 1).Select(v => "T" + v))})";
        var destTypeArg = "T" + range.Last();
        var sourceResultVars = string.Join(", ", range.Take(i + 1).Select(v => "v" + v));
        var sourceResultVarDecl = i == 0 ? sourceResultVars : $"({sourceResultVars})";
        var comment = @$"/// <summary>
    /// もとの結果が成功の場合に、引数で指定された処理を実行し、その結果ともとの結果の値を混ぜた値を返します。
    /// </summary>
    /// <param name=""source"">もとの結果</param>
    /// <param name=""dest"">処理</param>
{string.Join(Environment.NewLine, range.Take(i + 1).Select(v => "    /// <typeparam name=\"T" + v + "\">もとの結果の" + v + "番目の成功の型</typeparam>"))}
    /// <typeparam name=""T{range.Last()}"">処理の結果の成功の型</typeparam>
    /// <returns>もとの結果の成功の値と、処理の結果の成功の値を混ぜた値</returns>";
#>
    <#= comment #>
    public static Result<(<#= typeArgs #>)> Combine<<#= typeArgs #>>(
        this in Result<<#= sourceTypeArgs #>> source,
        Func<<#= sourceTypeArgs #>, Result<<#= destTypeArg #>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(<#= typeArgs #>)>(source.GetError());

        var <#= sourceResultVarDecl #> = source.Get();
        var destResult = dest(<#= sourceResultVarDecl #>);
        if (destResult.IsError) return Result.Error<(<#= typeArgs #>)>(destResult.GetError());
        return Result.Ok((<#= sourceResultVars #>, destResult.Get()));
    }

    <#= comment #>
    public static async Task<Result<(<#= typeArgs #>)>> Combine<<#= typeArgs #>>(
        this Task<Result<<#= sourceTypeArgs #>>> source,
        Func<<#= sourceTypeArgs #>, Result<<#= destTypeArg #>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return Combine(sourceResult, dest);
    }

    <#= comment #>
    public static async Task<Result<(<#= typeArgs #>)>> Combine<<#= typeArgs #>>(
        this Result<<#= sourceTypeArgs #>> source,
        Func<<#= sourceTypeArgs #>, Task<Result<<#= destTypeArg #>>>> dest)
    {
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        if (source.IsError) return Result.Error<(<#= typeArgs #>)>(source.GetError());

        var <#= sourceResultVarDecl #> = source.Get();
        var destResult = await dest(<#= sourceResultVarDecl #>).ConfigureAwait(false);
        if (destResult.IsError) return Result.Error<(<#= typeArgs #>)>(destResult.GetError());
        return Result.Ok((<#= sourceResultVars #>, destResult.Get()));
    }

    <#= comment #>
    public static async Task<Result<(<#= typeArgs #>)>> Combine<<#= typeArgs #>>(
        this Task<Result<<#= sourceTypeArgs #>>> source,
        Func<<#= sourceTypeArgs #>, Task<Result<<#= destTypeArg #>>>> dest)
    {
        if (source is null) throw new ArgumentNullException(nameof(source));
        if (dest is null) throw new ArgumentNullException(nameof(dest));

        var sourceResult = await source.ConfigureAwait(false);
        return await Combine(sourceResult, dest).ConfigureAwait(false);
    }

<#
    }
#>
}
