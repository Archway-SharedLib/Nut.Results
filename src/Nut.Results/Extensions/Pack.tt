<#@ template language="C#" #>
<#@ output extension=".g.cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Diagnostics" #>// <auto-generated />
using System;
using System.Threading.Tasks;

namespace Nut.Results;

public static partial class ResultExtensions
{
    public static Result<(T1, T2)> Pack<T1, T2>(this Result<T1> source, Func<Result<T1>, Result<T2>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(T1, T2)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(T1, T2)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue, resultValue));
    }

    public static async Task<Result<(T1, T2)>> Pack<T1, T2>(this Task<Result<T1>> source, Func<T1, Result<T2>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T1, T2)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T1, T2)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue, resultValue));
    }

    public static async Task<Result<(T1, T2)>> Pack<T1, T2>(this Result<T1> source, Func<T1, Task<Result<T2>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(T1, T2)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T1, T2)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue, resultValue));
    }

    public static async Task<Result<(T1, T2)>> Pack<T1, T2>(this Task<Result<T1>> source, Func<T1, Task<Result<T2>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(T1, T2)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(T1, T2)>();
        var resultValue = result.Get();
        return Result.Ok((sourceValue, resultValue));
    }
<#
    for (var i = 2; i <= 15; i++)
    {
        var range = Enumerable.Range(0, i + 1);
        var typeArgs = string.Join(", ", range.Select(v => "T" + v));
        var sourceTypeArgs = string.Join(", ", range.Take(range.Count() - 1).Select(v => "T" + v));
        var returnSourceValues = string.Join(", ", range.Skip(1).Select(v => "sourceValue.Item" + v));
#>

    public static Result<(<#= typeArgs #>)> Pack<<#= typeArgs #>>(this in Result<(<#= sourceTypeArgs #>)> source, Func<(<#= sourceTypeArgs #>), Result<T<#=range.Last()#>>> func)
    {
        if(source.IsError) return source.PreserveErrorAs<(<#= typeArgs #>)>();
        var sourceValue = source.Get();
        var result = func(sourceValue);
        if(result.IsError) return result.PreserveErrorAs<(<#= typeArgs #>)>();
        var resultValue = result.Get();
        return Result.Ok((<#=returnSourceValues#>, resultValue));
    }

    public static async Task<Result<(<#= typeArgs #>)>> Pack<<#= typeArgs #>>(this Task<Result<(<#= sourceTypeArgs #>)>> source, Func<(<#= sourceTypeArgs #>), Result<T<#=range.Last()#>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(<#= typeArgs #>)>();
        var sourceValue = awaitedSource.Get();
        var result = func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(<#= typeArgs #>)>();
        var resultValue = result.Get();
        return Result.Ok((<#=returnSourceValues#>, resultValue));
    }

    public static async Task<Result<(<#= typeArgs #>)>> Pack<<#= typeArgs #>>(this Result<(<#= sourceTypeArgs #>)> source, Func<(<#= sourceTypeArgs #>), Task<Result<T<#=range.Last()#>>>> func)
    {
        if (source.IsError) return source.PreserveErrorAs<(<#= typeArgs #>)>();
        var sourceValue = source.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(<#= typeArgs #>)>();
        var resultValue = result.Get();
        return Result.Ok((<#=returnSourceValues#>, resultValue));
    }

    public static async Task<Result<(<#= typeArgs #>)>> Pack<<#= typeArgs #>>(this Task<Result<(<#= sourceTypeArgs #>)>> source, Func<(<#= sourceTypeArgs #>), Task<Result<T<#=range.Last()#>>>> func)
    {
        var awaitedSource = await source.ConfigureAwait(false);
        if (awaitedSource.IsError) return awaitedSource.PreserveErrorAs<(<#= typeArgs #>)>();
        var sourceValue = awaitedSource.Get();
        var result = await func(sourceValue);
        if (result.IsError) return result.PreserveErrorAs<(<#= typeArgs #>)>();
        var resultValue = result.Get();
        return Result.Ok((<#=returnSourceValues#>, resultValue));
    }
<#
    }
#>
}
