// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using FluentAssertions;
using Nut.Results.FluentAssertions;
using Xunit;

namespace Nut.Results.Test;

public partial class Match
{
    [Fact]
    public void Res_Res_Res_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<Result>)null, (_) => Result.Ok());
        act.Should().Throw<ArgumentNullException>();
    }

    [Fact]
    public void Res_Res_Res_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok(), (Func<IError, Result>)null);
        act.Should().Throw<ArgumentNullException>();
    }

    [Fact]
    public void Res_Res_Res_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public void Res_Res_Res_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public void Res_ResT_Res_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, Result>)null, (_) => Result.Ok());
        act.Should().Throw<ArgumentNullException>();
    }

    [Fact]
    public void Res_ResT_Res_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok(), (Func<IError, Result>)null);
        act.Should().Throw<ArgumentNullException>();
    }

    [Fact]
    public void Res_ResT_Res_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public void Res_ResT_Res_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public void ResT_Res_ResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<Result<int>>)null, (_) => Result.Ok(1));
        act.Should().Throw<ArgumentNullException>();
    }

    [Fact]
    public void ResT_Res_ResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok(1), (Func<IError, Result<int>>)null);
        act.Should().Throw<ArgumentNullException>();
    }

    [Fact]
    public void ResT_Res_ResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public void ResT_Res_ResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public void ResT_ResT_ResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, Result<int>>)null, (_) => Result.Ok(1));
        act.Should().Throw<ArgumentNullException>();
    }

    [Fact]
    public void ResT_ResT_ResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok(1), (Func<IError, Result<int>>)null);
        act.Should().Throw<ArgumentNullException>();
    }

    [Fact]
    public void ResT_ResT_ResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public void ResT_ResT_ResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskRes_Res_Res_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<Result>)null, (_) => Result.Ok().AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_Res_Res_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok(), (Func<IError, Task<Result>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_Res_Res_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskRes_Res_Res_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskRes_Res_TaskRes_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<Task<Result>>)null, (_) => Result.Ok());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_Res_TaskRes_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok().AsTask(), (Func<IError, Result>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_Res_TaskRes_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskRes_Res_TaskRes_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskRes_Res_TaskRes_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<Task<Result>>)null, (_) => Result.Ok().AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_Res_TaskRes_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok().AsTask(), (Func<IError, Task<Result>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_Res_TaskRes_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskRes_Res_TaskRes_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskRes_ResT_Res_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, Result>)null, (_) => Result.Ok().AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_ResT_Res_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok(), (Func<IError, Task<Result>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_ResT_Res_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskRes_ResT_Res_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskRes_ResT_TaskRes_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, Task<Result>>)null, (_) => Result.Ok());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_ResT_TaskRes_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok().AsTask(), (Func<IError, Result>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_ResT_TaskRes_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskRes_ResT_TaskRes_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskRes_ResT_TaskRes_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, Task<Result>>)null, (_) => Result.Ok().AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_ResT_TaskRes_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok().AsTask(), (Func<IError, Task<Result>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_ResT_TaskRes_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskRes_ResT_TaskRes_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskRes_TaskRes_Res_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<Result>)null, (_) => Result.Ok());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskRes_Res_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok(), (Func<IError, Result>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskRes_Res_Res_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok(), (_) => Result.Ok());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskRes_Res_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskRes_TaskRes_Res_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskRes_TaskRes_Res_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<Result>)null, (_) => Result.Ok().AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskRes_Res_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok(), (Func<IError, Task<Result>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskRes_Res_TaskRes_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok(), (_) => Result.Ok().AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskRes_Res_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskRes_TaskRes_Res_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskRes_TaskRes_TaskRes_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<Task<Result>>)null, (_) => Result.Ok());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskRes_TaskRes_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok().AsTask(), (Func<IError, Result>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskRes_TaskRes_Res_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok().AsTask(), (_) => Result.Ok());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskRes_TaskRes_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskRes_TaskRes_TaskRes_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskRes_TaskRes_TaskRes_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<Task<Result>>)null, (_) => Result.Ok().AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskRes_TaskRes_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok().AsTask(), (Func<IError, Task<Result>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskRes_TaskRes_TaskRes_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok().AsTask(), (_) => Result.Ok().AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskRes_TaskRes_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskRes_TaskRes_TaskRes_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskRes_TaskResT_Res_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, Result>)null, (_) => Result.Ok());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskResT_Res_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok(), (Func<IError, Result>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskResT_Res_Res_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok(), (_) => Result.Ok());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskResT_Res_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskRes_TaskResT_Res_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskRes_TaskResT_Res_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, Result>)null, (_) => Result.Ok().AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskResT_Res_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok(), (Func<IError, Task<Result>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskResT_Res_TaskRes_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok(), (_) => Result.Ok().AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskResT_Res_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskRes_TaskResT_Res_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskRes_TaskResT_TaskRes_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, Task<Result>>)null, (_) => Result.Ok());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskResT_TaskRes_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok().AsTask(), (Func<IError, Result>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskResT_TaskRes_Res_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok().AsTask(), (_) => Result.Ok());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskResT_TaskRes_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskRes_TaskResT_TaskRes_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskRes_TaskResT_TaskRes_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, Task<Result>>)null, (_) => Result.Ok().AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskResT_TaskRes_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok().AsTask(), (Func<IError, Task<Result>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskResT_TaskRes_TaskRes_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok().AsTask(), (_) => Result.Ok().AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskRes_TaskResT_TaskRes_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskRes_TaskResT_TaskRes_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskResT_Res_ResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<Result<int>>)null, (_) => Result.Ok(1).AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_Res_ResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok(1), (Func<IError, Task<Result<int>>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_Res_ResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskResT_Res_ResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskResT_Res_TaskResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<Task<Result<int>>>)null, (_) => Result.Ok(1));
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_Res_TaskResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok(1).AsTask(), (Func<IError, Result<int>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_Res_TaskResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskResT_Res_TaskResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskResT_Res_TaskResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<Task<Result<int>>>)null, (_) => Result.Ok(1).AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_Res_TaskResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok(1).AsTask(), (Func<IError, Task<Result<int>>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_Res_TaskResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskResT_Res_TaskResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskResT_ResT_ResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, Result<int>>)null, (_) => Result.Ok(1).AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_ResT_ResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok(1), (Func<IError, Task<Result<int>>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_ResT_ResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskResT_ResT_ResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskResT_ResT_TaskResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, Task<Result<int>>>)null, (_) => Result.Ok(1));
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_ResT_TaskResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok(1).AsTask(), (Func<IError, Result<int>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_ResT_TaskResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskResT_ResT_TaskResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskResT_ResT_TaskResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, Task<Result<int>>>)null, (_) => Result.Ok(1).AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_ResT_TaskResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok(1).AsTask(), (Func<IError, Task<Result<int>>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_ResT_TaskResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskResT_ResT_TaskResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskResT_TaskRes_ResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<Result<int>>)null, (_) => Result.Ok(1));
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskRes_ResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok(1), (Func<IError, Result<int>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskRes_ResT_ResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok(1), (_) => Result.Ok(1));
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskRes_ResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskResT_TaskRes_ResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskResT_TaskRes_ResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<Result<int>>)null, (_) => Result.Ok(1).AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskRes_ResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok(1), (Func<IError, Task<Result<int>>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskRes_ResT_TaskResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok(1), (_) => Result.Ok(1).AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskRes_ResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskResT_TaskRes_ResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskResT_TaskRes_TaskResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<Task<Result<int>>>)null, (_) => Result.Ok(1));
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskRes_TaskResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok(1).AsTask(), (Func<IError, Result<int>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskRes_TaskResT_ResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok(1).AsTask(), (_) => Result.Ok(1));
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskRes_TaskResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskResT_TaskRes_TaskResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskResT_TaskRes_TaskResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<Task<Result<int>>>)null, (_) => Result.Ok(1).AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskRes_TaskResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok(1).AsTask(), (Func<IError, Task<Result<int>>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskRes_TaskResT_TaskResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok(1).AsTask(), (_) => Result.Ok(1).AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskRes_TaskResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskResT_TaskRes_TaskResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskResT_TaskResT_ResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, Result<int>>)null, (_) => Result.Ok(1));
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskResT_ResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok(1), (Func<IError, Result<int>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskResT_ResT_ResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok(1), (_) => Result.Ok(1));
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskResT_ResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskResT_TaskResT_ResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskResT_TaskResT_ResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, Result<int>>)null, (_) => Result.Ok(1).AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskResT_ResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok(1), (Func<IError, Task<Result<int>>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskResT_ResT_TaskResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok(1), (_) => Result.Ok(1).AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskResT_ResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskResT_TaskResT_ResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskResT_TaskResT_TaskResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, Task<Result<int>>>)null, (_) => Result.Ok(1));
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskResT_TaskResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok(1).AsTask(), (Func<IError, Result<int>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskResT_TaskResT_ResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok(1).AsTask(), (_) => Result.Ok(1));
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskResT_TaskResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskResT_TaskResT_TaskResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task TaskResT_TaskResT_TaskResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, Task<Result<int>>>)null, (_) => Result.Ok(1).AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskResT_TaskResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok(1).AsTask(), (Func<IError, Task<Result<int>>>)null);
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskResT_TaskResT_TaskResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok(1).AsTask(), (_) => Result.Ok(1).AsTask());
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task TaskResT_TaskResT_TaskResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task TaskResT_TaskResT_TaskResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_Res_Res_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<Result>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_Res_Res_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_Res_Res_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_Res_Res_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_Res_TaskRes_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<Task<Result>>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_Res_TaskRes_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok().AsTask(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_Res_TaskRes_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_Res_TaskRes_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_Res_ValueTaskRes_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<ValueTask<Result>>)null, (_) => Result.Ok()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_Res_ValueTaskRes_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok().AsValueTask(), (Func<IError, Result>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_Res_ValueTaskRes_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_Res_ValueTaskRes_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_Res_ValueTaskRes_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<ValueTask<Result>>)null, (_) => Result.Ok().AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_Res_ValueTaskRes_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok().AsValueTask(), (Func<IError, Task<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_Res_ValueTaskRes_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_Res_ValueTaskRes_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_Res_ValueTaskRes_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<ValueTask<Result>>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_Res_ValueTaskRes_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok().AsValueTask(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_Res_ValueTaskRes_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_Res_ValueTaskRes_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_Res_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, Result>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_Res_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_Res_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_Res_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_TaskRes_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, Task<Result>>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_TaskRes_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok().AsTask(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_TaskRes_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_TaskRes_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_ValueTaskRes_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, ValueTask<Result>>)null, (_) => Result.Ok()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_ValueTaskRes_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok().AsValueTask(), (Func<IError, Result>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_ValueTaskRes_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_ValueTaskRes_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_ValueTaskRes_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, ValueTask<Result>>)null, (_) => Result.Ok().AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_ValueTaskRes_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok().AsValueTask(), (Func<IError, Task<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_ValueTaskRes_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_ValueTaskRes_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_ValueTaskRes_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, ValueTask<Result>>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_ValueTaskRes_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok().AsValueTask(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_ValueTaskRes_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ResT_ValueTaskRes_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_Res_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<Result>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_Res_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_Res_ValueTaskRes_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok(), (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_Res_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_Res_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_TaskRes_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<Task<Result>>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_TaskRes_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok().AsTask(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_TaskRes_ValueTaskRes_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok().AsTask(), (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_TaskRes_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_TaskRes_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_ValueTaskRes_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<ValueTask<Result>>)null, (_) => Result.Ok()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_ValueTaskRes_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok().AsValueTask(), (Func<IError, Result>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_ValueTaskRes_Res_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok().AsValueTask(), (_) => Result.Ok()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_ValueTaskRes_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_ValueTaskRes_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_ValueTaskRes_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<ValueTask<Result>>)null, (_) => Result.Ok().AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_ValueTaskRes_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok().AsValueTask(), (Func<IError, Task<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_ValueTaskRes_TaskRes_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok().AsValueTask(), (_) => Result.Ok().AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_ValueTaskRes_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_ValueTaskRes_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_ValueTaskRes_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<ValueTask<Result>>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_ValueTaskRes_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok().AsValueTask(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_ValueTaskRes_ValueTaskRes_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok().AsValueTask(), (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_ValueTaskRes_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_TaskRes_ValueTaskRes_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_Res_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, Result>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_Res_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_Res_ValueTaskRes_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok(), (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_Res_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_Res_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_TaskRes_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, Task<Result>>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_TaskRes_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok().AsTask(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_TaskRes_ValueTaskRes_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok().AsTask(), (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_TaskRes_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_TaskRes_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_ValueTaskRes_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, ValueTask<Result>>)null, (_) => Result.Ok()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_ValueTaskRes_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok().AsValueTask(), (Func<IError, Result>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_ValueTaskRes_Res_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok().AsValueTask(), (_) => Result.Ok()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_ValueTaskRes_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_ValueTaskRes_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_ValueTaskRes_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, ValueTask<Result>>)null, (_) => Result.Ok().AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_ValueTaskRes_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok().AsValueTask(), (Func<IError, Task<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_ValueTaskRes_TaskRes_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok().AsValueTask(), (_) => Result.Ok().AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_ValueTaskRes_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_ValueTaskRes_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_ValueTaskRes_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, ValueTask<Result>>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_ValueTaskRes_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok().AsValueTask(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_ValueTaskRes_ValueTaskRes_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok().AsValueTask(), (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_ValueTaskRes_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_TaskResT_ValueTaskRes_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_Res_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<Result>)null, (_) => Result.Ok()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_Res_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok(), (Func<IError, Result>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_Res_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_Res_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_Res_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<Result>)null, (_) => Result.Ok().AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_Res_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok(), (Func<IError, Task<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_Res_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_Res_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_Res_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<Result>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_Res_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_Res_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_Res_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_TaskRes_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<Task<Result>>)null, (_) => Result.Ok()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_TaskRes_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok().AsTask(), (Func<IError, Result>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_TaskRes_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_TaskRes_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_TaskRes_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<Task<Result>>)null, (_) => Result.Ok().AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_TaskRes_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok().AsTask(), (Func<IError, Task<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_TaskRes_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_TaskRes_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_TaskRes_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<Task<Result>>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_TaskRes_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok().AsTask(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_TaskRes_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_TaskRes_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_ValueTaskRes_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<ValueTask<Result>>)null, (_) => Result.Ok()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_ValueTaskRes_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok().AsValueTask(), (Func<IError, Result>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_ValueTaskRes_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_ValueTaskRes_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_ValueTaskRes_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<ValueTask<Result>>)null, (_) => Result.Ok().AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_ValueTaskRes_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok().AsValueTask(), (Func<IError, Task<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_ValueTaskRes_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_ValueTaskRes_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_ValueTaskRes_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<ValueTask<Result>>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_ValueTaskRes_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok().AsValueTask(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_ValueTaskRes_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskRes_ValueTaskRes_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_Res_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, Result>)null, (_) => Result.Ok()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_Res_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok(), (Func<IError, Result>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_Res_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_Res_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_Res_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, Result>)null, (_) => Result.Ok().AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_Res_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok(), (Func<IError, Task<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_Res_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_Res_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_Res_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, Result>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_Res_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_Res_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_Res_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_TaskRes_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, Task<Result>>)null, (_) => Result.Ok()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_TaskRes_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok().AsTask(), (Func<IError, Result>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_TaskRes_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_TaskRes_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_TaskRes_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, Task<Result>>)null, (_) => Result.Ok().AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_TaskRes_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok().AsTask(), (Func<IError, Task<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_TaskRes_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_TaskRes_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_TaskRes_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, Task<Result>>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_TaskRes_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok().AsTask(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_TaskRes_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_TaskRes_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_ValueTaskRes_Res_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, ValueTask<Result>>)null, (_) => Result.Ok()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_ValueTaskRes_Res_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok().AsValueTask(), (Func<IError, Result>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_ValueTaskRes_Res_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_ValueTaskRes_Res_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_ValueTaskRes_TaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, ValueTask<Result>>)null, (_) => Result.Ok().AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_ValueTaskRes_TaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok().AsValueTask(), (Func<IError, Task<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_ValueTaskRes_TaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_ValueTaskRes_TaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_ValueTaskRes_ValueTaskRes_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, ValueTask<Result>>)null, (_) => Result.Ok().AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_ValueTaskRes_ValueTaskRes_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok().AsValueTask(), (Func<IError, ValueTask<Result>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_ValueTaskRes_ValueTaskRes_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskRes_ValueTaskResT_ValueTaskRes_ValueTaskRes_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok().AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_Res_ResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<Result<int>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_Res_ResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok(1), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_Res_ResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_Res_ResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_Res_TaskResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<Task<Result<int>>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_Res_TaskResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok(1).AsTask(), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_Res_TaskResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_Res_TaskResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_Res_ValueTaskResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<ValueTask<Result<int>>>)null, (_) => Result.Ok(1)).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_Res_ValueTaskResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok(1).AsValueTask(), (Func<IError, Result<int>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_Res_ValueTaskResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_Res_ValueTaskResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_Res_ValueTaskResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<ValueTask<Result<int>>>)null, (_) => Result.Ok(1).AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_Res_ValueTaskResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok(1).AsValueTask(), (Func<IError, Task<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_Res_ValueTaskResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_Res_ValueTaskResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_Res_ValueTaskResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), (Func<ValueTask<Result<int>>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_Res_ValueTaskResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(), () => Result.Ok(1).AsValueTask(), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_Res_ValueTaskResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_Res_ValueTaskResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_ResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, Result<int>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_ResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok(1), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_ResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_ResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_TaskResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, Task<Result<int>>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_TaskResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok(1).AsTask(), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_TaskResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_TaskResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_ValueTaskResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, ValueTask<Result<int>>>)null, (_) => Result.Ok(1)).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_ValueTaskResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok(1).AsValueTask(), (Func<IError, Result<int>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_ValueTaskResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_ValueTaskResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_ValueTaskResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, ValueTask<Result<int>>>)null, (_) => Result.Ok(1).AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_ValueTaskResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok(1).AsValueTask(), (Func<IError, Task<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_ValueTaskResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_ValueTaskResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_ValueTaskResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (Func<int, ValueTask<Result<int>>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_ValueTaskResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1), (_) => Result.Ok(1).AsValueTask(), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_ValueTaskResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ResT_ValueTaskResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<Result<int>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok(1), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ResT_ValueTaskResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok(1), (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_TaskResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<Task<Result<int>>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_TaskResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok(1).AsTask(), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_TaskResT_ValueTaskResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok(1).AsTask(), (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_TaskResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_TaskResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ValueTaskResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<ValueTask<Result<int>>>)null, (_) => Result.Ok(1)).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ValueTaskResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok(1).AsValueTask(), (Func<IError, Result<int>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ValueTaskResT_ResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok(1).AsValueTask(), (_) => Result.Ok(1)).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ValueTaskResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ValueTaskResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ValueTaskResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<ValueTask<Result<int>>>)null, (_) => Result.Ok(1).AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ValueTaskResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok(1).AsValueTask(), (Func<IError, Task<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ValueTaskResT_TaskResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok(1).AsValueTask(), (_) => Result.Ok(1).AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ValueTaskResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ValueTaskResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ValueTaskResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), (Func<ValueTask<Result<int>>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ValueTaskResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsTask(), () => Result.Ok(1).AsValueTask(), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ValueTaskResT_ValueTaskResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result>)null, () => Result.Ok(1).AsValueTask(), (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ValueTaskResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_TaskRes_ValueTaskResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, Result<int>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok(1), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ResT_ValueTaskResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok(1), (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_TaskResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, Task<Result<int>>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_TaskResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok(1).AsTask(), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_TaskResT_ValueTaskResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok(1).AsTask(), (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_TaskResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_TaskResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ValueTaskResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, ValueTask<Result<int>>>)null, (_) => Result.Ok(1)).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ValueTaskResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok(1).AsValueTask(), (Func<IError, Result<int>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ValueTaskResT_ResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok(1).AsValueTask(), (_) => Result.Ok(1)).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ValueTaskResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ValueTaskResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ValueTaskResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, ValueTask<Result<int>>>)null, (_) => Result.Ok(1).AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ValueTaskResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok(1).AsValueTask(), (Func<IError, Task<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ValueTaskResT_TaskResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok(1).AsValueTask(), (_) => Result.Ok(1).AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ValueTaskResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ValueTaskResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ValueTaskResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (Func<int, ValueTask<Result<int>>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ValueTaskResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsTask(), (_) => Result.Ok(1).AsValueTask(), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ValueTaskResT_ValueTaskResT_Sourceがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match((Task<Result<int>>)null, (_) => Result.Ok(1).AsValueTask(), (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ValueTaskResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_TaskResT_ValueTaskResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<Result<int>>)null, (_) => Result.Ok(1)).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok(1), (Func<IError, Result<int>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<Result<int>>)null, (_) => Result.Ok(1).AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok(1), (Func<IError, Task<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<Result<int>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok(1), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_TaskResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<Task<Result<int>>>)null, (_) => Result.Ok(1)).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_TaskResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok(1).AsTask(), (Func<IError, Result<int>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_TaskResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_TaskResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_TaskResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<Task<Result<int>>>)null, (_) => Result.Ok(1).AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_TaskResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok(1).AsTask(), (Func<IError, Task<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_TaskResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_TaskResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_TaskResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<Task<Result<int>>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_TaskResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok(1).AsTask(), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_TaskResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_TaskResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ValueTaskResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<ValueTask<Result<int>>>)null, (_) => Result.Ok(1)).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ValueTaskResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok(1).AsValueTask(), (Func<IError, Result<int>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ValueTaskResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ValueTaskResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ValueTaskResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<ValueTask<Result<int>>>)null, (_) => Result.Ok(1).AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ValueTaskResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok(1).AsValueTask(), (Func<IError, Task<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ValueTaskResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ValueTaskResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ValueTaskResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), (Func<ValueTask<Result<int>>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ValueTaskResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok().AsValueTask(), () => Result.Ok(1).AsValueTask(), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ValueTaskResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok().AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskRes_ValueTaskResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error(err).AsValueTask().Match(() =>
        {
            
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, Result<int>>)null, (_) => Result.Ok(1)).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok(1), (Func<IError, Result<int>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, Result<int>>)null, (_) => Result.Ok(1).AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok(1), (Func<IError, Task<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, Result<int>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok(1), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1);
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_TaskResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, Task<Result<int>>>)null, (_) => Result.Ok(1)).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_TaskResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok(1).AsTask(), (Func<IError, Result<int>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_TaskResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_TaskResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_TaskResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, Task<Result<int>>>)null, (_) => Result.Ok(1).AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_TaskResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok(1).AsTask(), (Func<IError, Task<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_TaskResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_TaskResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_TaskResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, Task<Result<int>>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_TaskResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok(1).AsTask(), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_TaskResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_TaskResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ValueTaskResT_ResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, ValueTask<Result<int>>>)null, (_) => Result.Ok(1)).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ValueTaskResT_ResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok(1).AsValueTask(), (Func<IError, Result<int>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ValueTaskResT_ResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ValueTaskResT_ResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err);
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ValueTaskResT_TaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, ValueTask<Result<int>>>)null, (_) => Result.Ok(1).AsTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ValueTaskResT_TaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok(1).AsValueTask(), (Func<IError, Task<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ValueTaskResT_TaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ValueTaskResT_TaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ValueTaskResT_ValueTaskResT_Okがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (Func<int, ValueTask<Result<int>>>)null, (_) => Result.Ok(1).AsValueTask()).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ValueTaskResT_ValueTaskResT_Errorがnullの場合は例外が発生する()
    {
        var act = () => ResultExtensions.Match(Result.Ok(1).AsValueTask(), (_) => Result.Ok(1).AsValueTask(), (Func<IError, ValueTask<Result<int>>>)null).AsTask();
        await act.Should().ThrowAsync<ArgumentNullException>();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ValueTaskResT_ValueTaskResT_Okの場合はokが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var result = await Result.Ok(1).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeOk();
        executedOk.Should().BeTrue();
        executedError.Should().BeFalse();
    }

    [Fact]
    public async Task ValueTaskResT_ValueTaskResT_ValueTaskResT_ValueTaskResT_Errorの場合はerrが実行される()
    {
        var executedOk = false;
        var executedError = false;
        var err = new Error();
        var result = await Result.Error<int>(err).AsValueTask().Match((v) =>
        {
            v.Should().Be(1);
            executedOk = true;
            return Result.Ok(1).AsValueTask();
        }, err =>
        {
            executedError = true;
            return Result.Error<int>(err).AsValueTask();
        });
        result.Should().BeError().And.Match(error => err == error);
        executedOk.Should().BeFalse();
        executedError.Should().BeTrue();
    }

}
